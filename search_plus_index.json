{"./":{"url":"./","title":"Study notes","keywords":"","body":"Study notes © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"markdown-ru-men.html":{"url":"markdown-ru-men.html","title":"Markdown入门","keywords":"","body":"Markdown入门 三、引用 七、列表 **** 无序列表 无序列表就是列表不排序,支持- * + 3种前缀,可用于表示1级列表,2级列表,3级列表. 示例: - 无序列表1 * 无序列表2 + 无序列表3 列表嵌套 上一级和下一级列表之间空两个空格 ``即可表示列表嵌套. 示例: - 无序列表1 * 无序列表11 * 无序列表12 * 无序列表13 + 无序列表131 + 无序列表132 + 无序列表133 - 无序列表2 - 无序列表3 八、表格 |默认居左|文字居中|文字居右| |-|:-:|-:| |居左对齐1|居中对齐1|居右对齐1| |居左对齐2|居中对齐2|居右对齐2| |居左对齐3|居中对齐3|居右对齐3| 十、流程图 © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"github-ji-gitbook-ru-men.html":{"url":"github-ji-gitbook-ru-men.html","title":"github及gitbook入门","summary":"写笔记，汇整成书籍形式方便查阅或分享，不希望造成额外的费用或时间成本，每次编辑书籍内容都能自动更新。解决方案：GitBook CLI + GitHub Pages + GitHub Actions","keywords":"","body":"github及gitbook入门 一、Github 创建个人主页 GitHub 为每一个用户分配了一个二级域名.github.io，用户为自己的二级域名创建主页很容易，只要在托管空间下创建一个名为.github.io的版本库，向其master分支提交网站静态页面即可，其中网站首页为index.html。访问网址：https://panxin30.github.io/ 创建项目主页 还可以为每个项目设置主页，项目主页也通过此二级域名进行访问。 访问地址：https://panxin30.github.io/book/ 为项目启用项目主页很简单，只需要在项目版本库中创建一个名为gh-pages的分支，并向其中添加静态网页即可。也就是说如果项目的Git版本库中包含了名为gh-pages分支的话，则表明该项目提供静态网页构成的主页，可以通过网址[.github.io/](http://.github.io/)访问到。\">http://[.github.io/](http://.github.io/)访问到。 创建gh-pages分支后，还需要在book这个仓库的settings中启用github pages 二、gitbook 1. 安装gitbook 参考：https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md 2. 如果被墙，切换为淘宝镜像再安装 切换为使用国内速度较快的淘宝镜像。 npm config set registry=http://registry.npm.taobao.org -g 开始写书 方法一、直接在gitbook上新建space，然后点击integrations，整合github其中一个仓库，编辑gitbook会自动同步到github对应仓库。担心是gitbook被墙，在国内访问较慢。数据不会丢，因为用的github仓库存储。github上可以直接编辑 https://abu.gitbook.io/notes 方法二： 目标：在github新建一个仓库叫book，gitclone到本地，添加book.json，使用gitbook install book目录/ 安装插件，使用gitbook build book目录/构建静态资源，上传到panxin30.github.io或者book所在仓库的gh-pages分支（这就是github pages）。 缺点：不会自动更新，修改了书籍的源代码后需要再按照上面的操作来一次。前提是已经在本地安装了gitbook 方法三、使用github actions实现博客自动化部署 gitbook建立新书，关联到github仓库，给这个仓库添加actions，actions自动提交变更到gh-pages 以方法二为基础添加actions这一步 1. 设定GitHub Access Token 为了让GitHub Actions 能自动帮我们发布GitBook 成果到GitHub Pages，必须授权GitHub 操作我们的Repository。作法就是设定Access Token。 这里都是在GitHub 网页上操作，按照以下步骤即可： 2. 产生一个GitHub Personal Access Token： 点右上角帐号的头像->选择Settings->左边列表选择最底下的Developer settings->下个页面的左边列表选择Personal access tokens。 点击Generate new token按钮。 输入Token的描述，权限勾选repo:status和public_repo两个项目。 点最下面的Generate token按钮。 这时候页面上会显示一组Token，复制下来。注意！产生的Token内容只会在此时显示一次，之后无法再查到，如果忘记Token就只能重新操作产生一次。 3. 到Repository 将刚刚的Token 设定成Secret： 到想要自动发布的Repository ->选择Settings->左边列表选则Secrets->点New secret按钮。 「Name」栏位填GH_ACCESS_TOKEN，「Value」栏位贴上刚刚复制的Token。 点Add secret按钮，设定就完成了。 4. GitHub Actions Workflow 万事俱备，只剩下设定GitHub Actions，让它能自动帮我们制书和发布到GitHub Pages。 回到资料夹，新增一个.github/workflows/build.yml档案： $ mkdir -p .github/workflows $ vi .github/workflows/build.yml 这里完全照抄即可，只需要把USER_NAME和USER_EMAIL设定更换成你的Git User Name和Email： name: Build my gitbook and deploy to gh-pages on: workflow_dispatch: push: branches: - master jobs: build: name: Build Gitbook runs-on: ubuntu-latest steps: # Check out the repo first - name: Checkout code uses: actions/checkout@v2 # Run this action to publish gitbook - name: Publish uses: tuliren/publish-gitbook@v1.0.0 with: # specify either github_token or personal_token github_token: 23e77fcdfda67b264737527285c2049f268c9f2a # personal_token: ${{ secrets.PERSONAL_TOKEN }} 上面是一个GitHub Actions的设定档，称为一个「workflow」。里面用到官方的checkout action，这几乎是每个workflow的起手式。使用https://github.com/marketplace/actions/publish-gitbook 选择的一个gitbook相关的别人做好的镜像,负责将markdown档制成GitBook静态网站，并自动将网站档案commit到gh-pagesbranch。 5. 将Workflow 档推上GitHub，触发自动发布到GitHub Pages 将刚刚新增的workflow 档进行commit 和push： $ git add .github/workflows/build.yml $ git commit -m \"add workflow file\" $ git push 回到GitHub Repository 页面，点「Actions」tab，会看到有一个workflow 任务被自动触发执行中： 等到执行完毕变成绿勾勾，会看到自动建立了gh-pagesbranch并commit GitBook静态网站的档案： 测试有没有自动更新 三、gitbook 插件 gitbook插件可以解决一些网站不太方便的地方，如侧边栏导航不能收缩，自带搜索不支持中文等。 插件安装、使用方法： 1、 在book.json的plugins参数中添加插件名。2、终端使用gitbook install来安装插件，或使用NPM命令来单独安装：npm install gitbook-plugin-插件名。3、重新打包就能看见效果。 注意：1、插件一定先要在book.json文件里面plugins中才能生效，如果只是安装了插件，而没配置的话是不会生效的。2、gitbook命令安装慢，而且是全部插件都安装一遍，如果只安装一个插件的话建议使用NPM命令安装。 还有很多可用插件，具体如下： 信息框(flexible-alerts) 阅读统计（pageview-count） 侧边栏宽度可调节（splitter） 页脚版权（page-copyright） 打赏功能（donate） 分享当前页面（sharing-plus） 修改标题栏图标（custom-favicon） 复选框（todo） 显示图片名称（image-captions） 目录折叠（toggle-chapters） 分章节展示（multipart） 插入 Logo（insert-logo） Google 分析（ga） 返回顶部（back-to-top-button） 代码添加行号和复制按钮（code） 高级搜索，支持中文（search-pro） 添加 Github 图标（github） 左侧目录可折叠 2.2.1 chapter-fold 支持多层目录，点击导航栏的标题名就可以实现折叠扩展。在book.json的plugins参数中添加插件名： { \"plugins\": [\"chapter-fold\"] } 然后使用npm install gitbook-plugin-chapter-fold命令安装插件。注意：要想目录折叠，SUMMARY.md目录应该如下： * [项目介绍](README.md) * [tcp说明](doc/http/tcp/tcp说明.md) * [udp说明](doc/http/tcp/udp/udp说明.md) * [html](doc/html/readme.md) * [HTML5-特性说明](doc/html/HTML5-特性说明.md) 如下写法会产生bug，导致CSS是收缩的，不能展开，效果如上面的动图： * CSS * [说明](doc/css/readme.md) 2.2.2 expandable-chapters 这个插件也是左侧目录折叠的插件，不同的是可以解决chapter-fold插件的bug，怎么写都会折叠目录在book.json的plugins参数中添加插件名： { \"plugins\": [ \"expandable-chapters\" ] } 安装命令：npm install gitbook-plugin-expandable-chapters注意：这个插件也有问题，就是如下写法的，需要点击箭头才能展开收缩菜单： * [tcp说明](doc/http/tcp/tcp说明.md) * [udp说明](doc/http/tcp/udp/udp说明.md) 解决的办法是和chapter-fold插件一起用，互补一下各自的问题就完美解决了： \"plugins\": [ \"expandable-chapters\", \"chapter-fold\", ] 2.5 回到顶部按钮 在book.json的plugins参数中添加插件名和配置信息： { \"plugins\": [ \"back-to-top-button\" ], } 使用npm install gitbook-plugin-back-to-top-button命令安装插件。 3.2 右上角添加github图标 在book.json的plugins参数中添加插件名和配置信息： { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } 然后使用npm install gitbook-plugin-github命令安装插件。注意：如果使用npm命令安装后报错GitBook doesn't satisfy the requirements of this plugin: >=4.0.0-alpha.0.请使用gitbook install来安装.或者npm uninstall gitbook-plugin-github卸载后，使用npm i gitbook-plugin-github@2.0.0安装，然后查看是否还报错。 3.3 edit-link在线编辑文件 book.json中插件名和配置信息： { \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"//github.com/yulilong/book/edit/master\", \"label\": \"编辑此页面\" } } } 使用npm i gitbook-plugin-edit-link命令安装插件。 点击编辑按钮，即可跳转到github仓库在线编辑这个文件。 3.6 prism代码块颜色插件(测试没有通过) 插件地址：https://github.com/gaearon/gi...此插件需要禁用gitbook自带的highlight插件。book.json中插件名和配置信息： { \"plugins\": [\"prism\", \"-highlight\"], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-okaidia.css\" ] } } } 使用npm install gitbook-plugin-prism命令安装插件。 更多的颜色参考：https://github.com/gaearon/gi... 注意：代码块的语言标注比如JS,CSS,如果标注一个插件不认识的语言，在运行打包命令gitbook build .这个插件会报错，提示不认识这个语言，这里需要注意一下。 © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/":{"url":"book/","title":"Book","keywords":"","body":"Book © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/":{"url":"book/notes/","title":"notes","keywords":"","body":"notes © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/":{"url":"book/notes/shell/","title":"shell","keywords":"","body":"shell © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/ru-he-cai-neng-xue-hao-shell-bian-cheng-zhi-lao-niao-jing-yan-tan.html":{"url":"book/notes/shell/ru-he-cai-neng-xue-hao-shell-bian-cheng-zhi-lao-niao-jing-yan-tan.html","title":"如何才能学好Shell编程之“老鸟”经验谈","keywords":"","body":"如何才能学好Shell编程之“老鸟”经验谈 学好Shell编程的核心：多练→多思考→再练→再思考，坚持如此循环即可！ 从老男孩IT教育毕业的一名学生曾在工作多年后返校分享了一篇“如何学好Shell编程”的讲稿，经过老男孩的整理后和读者分享如下。 （1）掌握Shell脚本基本语法的方法 最简单有效的方法就是将语法敲n+1遍。为什么不是n遍呢？因为这里的n指的是你刚开始为掌握语法而练习的那些天（21天法则），而1则是指在确定掌握语法后每天都要写一写、想一想，至少是要看一看，保持一个与Shell脚本接触的热度。 （2）掌握Shell脚本的各种常见语法 要掌握各类条件表达式、if多种判断、for循环的不同用法、While多种读文件的循环等，这样做不是为了什么都学会，而是为了能够看懂别人写的代码。掌握常见的各种语法，也就是要经常写，而且要持续写一段时间（让动作定型，在大脑和肌肉里都打上深刻烙印），各种语法都要用。 （3）形成自己的脚本开发风格 当掌握了各种常见的语法之后，就要选定一种适合自己的语法，形成自己的开发风格，例如：if语句的语法就只用一种，条件表达式的语法只用一种，函数的写法也只用一种，有些语法需要根据场景去选择，除非你是像师傅（老男孩）一样要教学育人。否则，没有必要什么语法都掌握。在解决问题的前提下，掌握一种语法，然后将其用精、用透就是最好的，切记横向贪多，要多纵深学习。 （4）从简单做起，简单判断，简单循环 初学者一定要从简单做起，最小化代码学习，简单判断，简单循环，简单案例练习，所有的大程序都是由多个小程序组成的，因此，一开始没必要写多大的程序，免得给自己带来过多的挫败感，形成编程恐惧症。可先通过小的程序培养兴趣及成就感，到碰到大的程序时，即使遇到困难也能坚持下去了。 （5）多模仿，多放下参考资料练习，多思考 多找一些脚本例子来仔细分析一下，或者是系统自带的，或者是别人写的（本书就包含大量例子），不要只看，看着会并不是真的会。当你闭上眼睛的时候，还能完整地回忆起来，甚至还能完整口述或手写出来才是真的会。 （6）学会分析问题，逐渐形成编程思维 在编写程序或脚本时，先将需求理解透，对大的需求进行分解，逐步形成小的程序或模块，然后再开发，或者先分析最终需求的基础实现，最后逐步扩展批量实现。例如师傅（老男孩）在编写批量关闭不需要自启动服务的脚本时，就采用了这种分析方法，思路如下： 1）掌握关闭一个服务的命令，即“chkconf?ig服务名off”。 2）批量处理时，会有多个服务名，那么就要用到多条以上的命令。 3）仔细分析以上命令，会发现需要处理的所有命令中，只有“服务名”不同，其他地方都一样，那么自然就会想到用循环语句来处理。 如果是你，能想到这些吗？若是想到了，则表示你已经形成了初级的编程思维了，恭喜你。 如果你能够通过分析将一个大的需求细分为各个小的单元，然后利用函数、判断、循环、命令等实现每一个小的单元，那么最后把所有程序组合起来就是一个大的脚本程序了。 如果达到了上述的水平，你就算会编程了，对于领导提出的需求，就能够进行合理的分解，只要在机器上多进行调试，相信一定能写出来。 （7）编程变量名字要规范，采用驼峰语法表示 oldboyAgeName用的就是驼峰表示法。记住，在学习的初期，不要去看大的脚本，要从小问题和小的方面着手，当你觉得小的判断、循环等在你的脑子里瞬间就能出来时，再开始去看和写大的脚本，进行深入练习。 师傅（老男孩）常说，新手初期最好的学习方法就是多敲代码，并针对问题进行分解练习，多敲代码就是让自己养成一个编程习惯，使肌肉、视觉和思维形成记忆，分解问题实际上就是掌握软件的设计和实现思想。 对于最高的编程境界，我个人的理解是：能把大问题进行完整的分析、分解且高效解决。 完整性：就是指预先考虑到各种可能性，将问题分解后，合理模块化并实现。 高效率：例如，在求“1+2+3...+100”的和时，考虑使用算法“（1+100）×100/2”，而不是逐个去加。 （8）不要拿来主义，特别是新手 好多网友看书或学习视频时，喜欢要文档、要代码，其实，这是学习的最大误区。 有了文档和代码，你会变得非常懒惰，心里面会觉得已经学会了，而实际上并没有学会。因此无论是看书还是学习视频，都要自己完成学习笔记及代码的书写，这本身就是最重要的学习过程，在学习上要肯于花时间和精力，而不是投机取巧。如果你至今都没有学好Linux运维，那么可以想一想是不是也犯了这个错误？ 做事情若有多种选择，就会比较轻松，没有选择就会比较痛苦。 提交解决方案、面试提问、笔试等都是如此 © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/shi-zhan/":{"url":"book/notes/shell/shi-zhan/","title":"实战","keywords":"","body":"实战 © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/shi-zhan/scripts/":{"url":"book/notes/shell/shi-zhan/scripts/","title":"scripts","keywords":"","body":"scripts © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/shi-zhan/scripts/qian-yi-jiao-ben.html":{"url":"book/notes/shell/shi-zhan/scripts/qian-yi-jiao-ben.html","title":"迁移脚本","keywords":"","body":"迁移脚本 #!/bin/bash PEXIT (){ echo $1 exit 9 } #导出中间库生成的数据 dump_newdb (){ id=$1 echo -e \"正在导出转化后的数据，请确认ID: $id 是否正确,10秒后继续,Ctrl+C 取消.\" sleep 10 mysqldump -uroot -h120.76.46.55 -pnHH29kEA7 brokerwork_t\"$id\" > 1.sql mysqldump -uroot -h120.76.46.55 -pnHH29kEA7 brokerwork_t\"$id\"_mt4_1 > 2.sql sed -e 's/DEFINER[ ]*=[ ]*[^*]*\\*/\\*/ ' 1.sql > brokerwork_t\"$id\".sql sed -e 's/DEFINER[ ]*=[ ]*[^*]*\\*/\\*/ ' 2.sql > brokerwork_t\"$id\"_mt4_1.sql mysqldump -uroot -h120.76.46.55 -pnHH29kEA7 --complete-insert --no-create-info --skip-add-locks message_transfer_t\"$id\" >message_transfer_t\"$id\".sql mongodump -h120.76.46.55:27017 -dtransfer\"$id\" -umsc -pabc123 -o /data/scripts/ # 如果有实时返佣 # mongodump -h120.76.46.55:27017 -drcr_t\"$id\" -uadmin --authenticationDatabase=admin -pWAer8R59G6 -o /root/ } #第二步 #将转化后的数据导入到测试环境. import_newdb_dev (){ id=$1 echo -e \"正在将转化后的数据导入开发环境，请确认ID: $id 是否正确,10秒后继续,Ctrl+C 取消.\" sleep 10 #导入到测试环境1,2不用再操作 mysql -uroot -h120.76.46.55 -pnHH29kEA7 bw_message qa_bw_message_$backup_date.sql mysqldump -ubwqa -hrm-j6c40s6glhqsd26cc.mysql.rds.aliyuncs.com -pGycHWb@qx9Ld --set-gtid-purged=OFF brokerwork_t$id > qa_bw_t$id_$backup_date.sql #import data to bw4.0 QA echo -e \"开始将mysql数据导入到qa mysql\\n\" sleep 3 mysql -ubwqa -hrm-j6c40s6glhqsd26cc.mysql.rds.aliyuncs.com -pGycHWb@qx9Ld -e \"drop database brokerwork_t$id;\" || PEXIT \"drop database brokerwork_t$id 失败.\" mysql -ubwqa -hrm-j6c40s6glhqsd26cc.mysql.rds.aliyuncs.com -pGycHWb@qx9Ld -e \"create database brokerwork_t$id;\" || PEXIT \"create database brokerwork_t$id 失败.\" mysql -ubwqa -hrm-j6c40s6glhqsd26cc.mysql.rds.aliyuncs.com -pGycHWb@qx9Ld brokerwork_t\"$id\" create_mongodb.js mongo 10.25.154.114:27017/brokerwork -ubrokerwork -p4wUgjFA create_mongodb.js # mongo 10.26.149.225:27017/brokerwork -ubrokerwork -p4wUgjFA create_mongodb.js # mongo 10.26.149.213:27017/brokerwork -ubrokerwork -p4wUgjFA create_mongodb.js #测试上面的语句 mongorestore -h10.25.154.114:27017 -dbrokerwork -ubrokerwork -p4wUgjFA transfer\"$id\" # mongorestore -h10.26.149.225:27017 -dbrokerwork -ubrokerwork -p4wUgjFA transfer\"$id\" # mongorestore -h10.26.149.213:27017 -dbrokerwork -ubrokerwork -p4wUgjFA transfer\"$id\" # 如果有实时返佣 # mongorestore -h10.26.60.3:27017 -drcr_t\"id\" -uroot -pleanwork123 --authenticationDatabase=admin --drop /root/rcr_t\"$id\" echo -e \"导入数据到qa环境完成\\n\" sleep 3 } #第四步 #导入到生产环境 #备份bw_message再导入这份数据(带上日期) #这里的id如000128 #db.getCollection('t_tasks_item').remove({'tenantId' : 'T000029'}); import_newdb_prod (){ id=$1 echo -e \"正在将转化后的数据导入开发环境，请确认ID: $id 是否正确,10秒后继续,Ctrl+C 取消.\" sleep 10 backup_date=`date \"+%Y-%m-%d-%H-%M\"` #/usr/bin/mysqldump -h127.0.0.1 -uroot -pGyc@HWb.qx9Ld --set-gtid-purged=OFF --all-databases > ali-hk-bw-db2.sql mysqldump -uroot -h10.28.184.253 -pGyc@HWb.qx9Ld --set-gtid-purged=OFF bw_message > prod_bw_message_$backup_date.sql mysqldump -uroot -h10.28.184.253 -pGyc@HWb.qx9Ld --set-gtid-purged=OFF brokerwork_t\"$id\" > brokerwork_t\"$id\"_$backup_date.sql echo -e \"即将删除数据库:brokerwork_t$id,请核对是否正确!!!;10秒后继续，Ctrl+C 取消. \\n\" sleep 10 mysql -uroot -h10.28.184.253 -pGyc@HWb.qx9Ld -e \"drop database brokerwork_t$id;\" || PEXIT \"drop database brokerwork_t$id 失败.\" mysql -uroot -h10.28.184.253 -pGyc@HWb.qx9Ld -e \"create database brokerwork_t$id;\" || PEXIT \"create database brokerwork_t$id 失败.\" mysql -uroot -h10.28.184.253 -pGyc@HWb.qx9Ld brokerwork_t\"$id\" create_mongodb.js mongo 10.28.185.68:27017/brokerwork -ubrokerwork -po6RJzAF1LELzutEv create_mongodb.js mongorestore -h10.28.185.68:27017 -dbrokerwork -ubrokerwork -po6RJzAF1LELzutEv transfer\"$id\" #mongorestore -h10.47.43.22:27017 -dbrokerwork -ubrokerwork -po6RJzAF1LELzutEv transfer\"$id\" #mongorestore -h10.47.36.173:27017 -dbrokerwork -ubrokerwork -po6RJzAF1LELzutEv transfer\"$id\" # 如果有返佣 # mongorestore -h10.47.43.22:27017 -drcr_t\"$id\" -uadmin -p'Jp@2Cny&XIun' --authenticationDatabase=admin rcr_t\"$id\" # mongorestore -h10.28.185.68:27017 -drcr_t\"$id\" -uadmin -p'Jp@2Cny&XIun' --authenticationDatabase=admin rcr_t\"$id\" echo -e \"导入数据到生产环境完成\\n\" sleep 3 } #id如000128 echo -e \"导出转化后的数据\\n\" sleep 3 #dump_newdb 000136 || PEXIT \"导出数据失败，请查看日志。\" echo -e \"导入新数据到dev环境\\n\" sleep 3 #import_newdb_dev id || PEXIT \"导入数据到dev环境失败。\" echo -e \"导入新数据到qa环境\\n\" sleep 3 #import_newdb_qa 000136 || PEXIT \"导入数据到qa环境失败.\" echo -e \"导入新数据到prod环境\\n\" sleep 3 import_newdb_prod 000136 || PEXIT \"导入数据到prod环境失败。\" exit 0 © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/shi-zhan/shell-jiao-ben-tiao-shi.html":{"url":"book/notes/shell/shi-zhan/shell-jiao-ben-tiao-shi.html","title":"shell脚本调试","keywords":"","body":"shell脚本调试 Shell脚本调试就是发现引发脚本错误的原因以及在脚本源代码中定位发生错误的行，常用的手段包括分析输出的错误信息，通过在脚本中加入调试语句，输出调试信息来辅助诊断错误，利用调试工具等 set -eux Shell脚本的错误可分为两类： 1.语法错误（syntax error），脚本无法执行到底。2.Shell脚本能够执行完毕，但是并不是按照我们所期望的方式运行，即存在逻辑错误 trap命令 tee命令 用于调试管道，tee -a 追加结果到debug.txt localIP=`cat /etc/sysconfig/network-scripts/ifcfg-eth0 | tee debug.txt | grep 'IPADDR' | tee -a debug.txt | cut -d= -f2 | tee -a debug.txt` echo \"The local IP is: $localIP\" © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/shi-zhan/for-he-while-du-hang-de-qu-bie.html":{"url":"book/notes/shell/shi-zhan/for-he-while-du-hang-de-qu-bie.html","title":"for和while读行的区别","keywords":"","body":"for和while读行的区别 $ cat file aaaa bbbb cccc dddd $ cat file | while read line; do echo $line; done aaaa bbbb cccc dddd $ for line in $( © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/shell/shi-zhan/yi-ge-wen-jian-qu-2-ge-can-shu.html":{"url":"book/notes/shell/shi-zhan/yi-ge-wen-jian-qu-2-ge-can-shu.html","title":"一个文件取2个参数","keywords":"","body":"一个文件取2个参数 root@cn-office-crm-qa-all-k8s01:~# cat 1.txt registry-hk-tools.lwork.com/bw-account:master-31 registry-hk-tools.lwork.com/bw-copy-trade:master-3 对k8s集群中服务的镜像升级同时需要服务名字和镜像地址链 root@cn-office-crm-qa-all-k8s01:~# cat 2.sh #!/bin/bash for i in $(cat 1.txt) do k=$(echo $i | awk -F ':' '{print $1}' | awk -F '/' '{print $2}') kubectl set image deploy $k $k=$i -n crm-prod sleep 120 done © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/openstack/":{"url":"book/notes/openstack/","title":"Openstack","keywords":"","body":"Openstack © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/openstack/openstack-ji-chu/":{"url":"book/notes/openstack/openstack-ji-chu/","title":"openstack基础","keywords":"","body":"openstack基础 © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/openstack/openstack-ji-chu/wang-luo-xu-ni-hua-ji-shu-ji-chu.html":{"url":"book/notes/openstack/openstack-ji-chu/wang-luo-xu-ni-hua-ji-shu-ji-chu.html","title":"网络虚拟化技术基础","keywords":"","body":"网络虚拟化技术基础 网络虚拟化： 桥接 隔离 路由 NAT 一旦虚拟机部署到了某个物理机上，cpu和内存就只能使用该物理 管理节点两张网卡 内网网络网卡或者多一个可以访问互联网的网卡 物理机节点两张网卡 一个用于实现管理操作，一个用于所有能建立虚拟机的物理机彼此通信 网络节点3张网卡，一个内部管理用，一个用于连接互联网，一个跟各物理机通信 管理节点跟虚拟化不在同一个概念中 VLAN间路由: 路由器: 访问链接：router为每个vlan提供一个接口 汇聚链接：router只向交换机提供一个接口 三层交换机： 三层交换机既有二层功能又有三层功能。首先在2层能够在各个接口之间实现报文交换的功能， 在上面额外提供一个软件实现路由 # 容器级的虚拟化，就是利用linux内核提供的资源隔离功能来实现的。 虚拟化技术： linux内核： namespace：名称空间，完成特定类型资源的隔离 cgroups：控制组，可以在已经隔离出来的的名称空间中，按比例把资源分配到名称空间中去 假设一台服务器有16核，分成4个分支ABCD（A-8C,B-4C,C-2C,D-2C）A这个分支可以分成 3个分支(A1-3C,A2-3C,A3-2C)。那么一个进程，可以绑定到根上，这16核，它想用多少用多 少。也可以绑定到A分支上，最多能用8核。也可以绑定到A1分支上，最多能用3核。也可以绑定 到B分支上，最多能用4核。 网络虚拟化技术 复杂的虚拟化网络： netns OpenVSwitch openvswitch:基于C语言研发，特性： 支持802.1q,trunk,access 支持NIC绑定， NetFlow,sFlow QoS配置及策略 GRE，Vxlan OpenFlow 基于linux实现高性能转发 openvswitch的组成部分： ovs-vswitchd: ovs daemon,实现数据报文交换功能，和linux内核兼容模块一同实现了基于流的 交换技术 ovsdb-server:轻量级的数据库服务，主要保存了整个OVS的配置信息 ovs-vsctl: 用于获取或更改ovs-vswitchd的配置信息，修改操作会保存到ovsdb-server © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/notes/openstack/openstack-ji-chu/openstack-ji-chu.html":{"url":"book/notes/openstack/openstack-ji-chu/openstack-ji-chu.html","title":"openstack基础","keywords":"","body":"openstack基础 IaaS(openstack),PaaS(docker),SaaS Object Storage: 代码名Swift:分布式存储，基于RESTful的API实现非结构化数据对象的存储及检索。 Block Storage: 代码名Cinder: 为运行实例而提供的持久性块存储。 image service:代码名字Glance: 当nova创建一个虚拟机实例，需要下载磁盘映像的时候，会先找glance，glance会告诉你到哪里去下载。所以glance是作为swift前端，存储和检索虚拟机磁盘镜像。 Identity: 代码名Key stone: 为Openstack中所有服务提供认证和授权服务以及端点目录 新建并启动一个实例的流程： 通过dashboard/CLI © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/ubuntu.html":{"url":"book/ubuntu.html","title":"Ubuntu","keywords":"","body":"Ubuntu © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/network-foundation.html":{"url":"book/network-foundation.html","title":"Network foundation","keywords":"","body":"Network foundation © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/za.html":{"url":"book/za.html","title":"za","keywords":"","body":"za © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/windows/":{"url":"book/windows/","title":"Windows","keywords":"","body":"Windows © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/windows/winserver-guan-bi-shi-jian-gen-zong-cheng-xu.html":{"url":"book/windows/winserver-guan-bi-shi-jian-gen-zong-cheng-xu.html","title":"winserver关闭事件跟踪程序","keywords":"","body":"winserver关闭事件跟踪程序 winserver重启后出现事件跟踪界面，导致自启动的服务没有启动 gpedit.msc 依次展开计算机配置→管理模板→系统，在右边的窗口中找到显示“关闭事件跟踪程序” 启用在登陆时不显式\"管理你的服务器\" 服务器管理器登录不自动启动 打开服务器管理器-->点击管理-->服务器管理器属性-->选择在登陆时不自动启动 © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/windows/windows-chang-yong-ming-ling.html":{"url":"book/windows/windows-chang-yong-ming-ling.html","title":"windows常用命令","keywords":"","body":"windows常用命令 services.msc 服务 control.exe 控制面板 gpedit.msc 本地组策略 regedit.exe 注册表 systeminfo eventvwr.msc 日志 `netstat -ano | findstr 端口号` # **更改系统区域设置** * Windows 8.1/Windows 10/Windows Server 2012/Windows Server 2012 R2/Windows 2016/Windows Server 2019：单击屏幕左下角的Windows徽标，单击k控制面板，然后单击区域。在区域对话框中，单击管理选项卡，然后单击非 Unicode 程序的语言下的**更改系统区域设置。** © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/windows/win10-qi-ye-ltsc-ban-ji-huo.html":{"url":"book/windows/win10-qi-ye-ltsc-ban-ji-huo.html","title":"win10企业LTSC版激活","keywords":"","body":"win10企业LTSC版激活 引用:https://www.win10zjb.com/win10jihuo/8430.html Windows 10 LTSC 2019 Windows 10 企业版 LTSC 2019：M7XTQ-FN8P6-TTKYV-9D4CC-J462D Windows 10 企业版 N LTSC 2019：2NFX-8DJQP-P6BBQ-THF9C-7CG2H 1.管理员启动cmd 2.在命令符号符窗口输入以下内容 slmgr/ipk M7XTQ-FN8P6-TTKYV-9D4CC-J462D slmgr/skms kms.03k.org slmgr/ato © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/windows/debug-tools.html":{"url":"book/windows/debug-tools.html","title":"debug-tools","keywords":"","body":"debug-tools https://docs.microsoft.com/zh-cn/windows-hardware/drivers/debugger/debugger-download-tools © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "},"book/test.html":{"url":"book/test.html","title":"test","keywords":"","body":"test © panxin30 all right reserved，powered by Gitbook文件修订时间: 2021-01-29 09:45:44 "}}